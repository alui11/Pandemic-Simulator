function [currentBoardStateOut] = oubtreakF(city, currentBoardState, excludeCity)
% [currentBoardStateF] = oubtreakF(city, currentBoardState, excludeCity)
% Causes an outbreak
% excludeCity prevents recursion in cascading outbreaks

%% Adjacent cities

adjacentCities = [13, 2, 46, 40, 0, 0;...
    1, 13, 14, 5, 3, 0;...
    2, 6, 4, 0, 0, 0;...
    3, 6, 7, 10, 0, 0;...
    2, 6, 15, 0, 0, 0;...
    3, 4, 5, 15, 0, 0;...
    4, 10, 11, 8, 0, 0;...
    7, 9, 11, 12, 0, 0;...
    8, 26, 27, 0, 0, 0;...
    4, 7, 11, 20, 25, 0;...
    7, 8, 10, 12, 25, 0;...
    8, 11, 26, 0, 0, 0;...
    1, 2, 14, 48, 0, 0;...
    2, 13, 15, 16, 17, 0;...
    5, 6, 14, 16, 0, 0;...
    14, 15, 17, 19, 20, 0;...
    14, 16, 18, 0, 0, 0;...
    17, 0, 0, 0, 0, 0;...
    16, 20, 0, 0, 0, 0;...
    10, 19, 16, 21, 0, 0;...
    20, 22, 23, 0, 0, 0;...
    28, 21, 23, 24, 0, 0;...
    21, 22, 24, 0, 0, 0;...
    22, 23, 0, 0, 0, 0;...
    10, 11, 26, 28, 0, 0;...
    9, 12, 25, 27, 28, 29;...
    9, 26, 30, 0, 0, 0;...
    25, 26, 29, 31, 22, 0;...
    26, 28, 30, 31, 32, 0;...
    27, 29, 32, 33, 0, 0;...
    28, 29, 32, 0, 0, 0;...
    29, 30, 31, 33, 34, 0;...
    30, 32, 34, 35, 36, 0;...
    32, 33, 36, 0, 0, 0;...
    33, 36, 44, 41, 0, 0;...
    33, 34, 35, 44, 47, 0;...
    38, 39, 0, 0, 0, 0;...
    37, 39, 40, 0, 0, 0;...
    37, 38, 40, 41, 42, 0;...
    1, 38, 39, 43, 0, 0;...
    35, 39, 42, 44, 45, 46;...
    39, 41, 43, 46, 0, 0;...
    40, 42, 0, 0, 0, 0;...
    35, 36, 41, 45, 47, 0;...
    41, 44, 46, 47, 0, 0;...
    1, 41, 42, 45, 48, 0;...
    36, 44, 45, 48, 0, 0;...
    13, 46, 47, 0, 0, 0];

%% Decide color

if city <=12
    color = 1;
elseif city <=24
    color = 2;
elseif city <=36
    color = 3;
else
    color = 4;
end

%% Infect

for istep = 1:6
    if adjacentCities(city, istep) ~= 0 && adjacentCities(city, istep) ~= excludeCity
        if currentBoardState{5}(adjacentCities(city, istep), color) == 3 && currentBoardState{8} < 8
           currentBoardState{8} = currentBoardState{8} + 1;
           currentBoardState = oubtreakF(adjacentCities(city, istep), currentBoardState, city);
        elseif currentBoardState{8} < 8
            currentBoardState{5}(adjacentCities(city, istep), color) =...
                currentBoardState{5}(adjacentCities(city, istep), color) + 1;
        end
    end
end

%% Outputs

currentBoardStateOut = currentBoardState;
